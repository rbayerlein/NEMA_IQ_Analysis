function [ave_sph,sd_sph,max_sph,weights] = voi_sph_sub_3D(data, xctr, yctr, zctr, diam, wflg)%[ave_circ,sd_circ] = voi_sph_sub(data, xctr, yctr, zctr, diam, wflg)%     Sphereical VOI at (xctr,yctr,zctr) with diameter diam (pixels)%     if wflg==1:  contribution of each voxel is weighted by sq. of ROI area within voxel%                  (used in search function for spehere center)% Modified from roi_circ_sub() (MeDW 06/22/10)% Note: xctr,yctr,zctr are real numbers, but they relates to voxel indexes,%       i.e., xctr=3.0 is center of the 3rd voxel; %             xctr=2.5 is boundary btw. voxels 2 and 3nsub=10;    % Number of subsamples on each side of a voxelnsubstep=1.0/nsub; nsubhalf=nsubstep/2.0;% Find indexes of voxels containing (portion of) ROIrad=(diam)/2.0; radsq=rad^2;epsrad=0.01;  rade=rad-epsrad;  % to avoid expantion of region if ROI touches boundaryxmin=round(xctr-rade);  xmax=round(xctr+rade);ymin=round(yctr-rade);  ymax=round(yctr+rade);zmin=round(zctr-rade);  zmax=round(zctr+rade);voivoxels=(xmax-xmin+1)*(ymax-ymin+1)*(zmax-zmin+1);wt=zeros(voivoxels,1);sph=zeros(voivoxels,1);if xmin<0    xmin=1;endif xmax>size(data,1)    xmax=size(data,1);endif ymin<0    ymin=1;endif ymax>size(data,2)    ymax=size(data,2);endif zmin<0    zmin=1;endif zmax>size(data,3)    zmax=size(data,3);end% Compute counts inside VOIind=0;for iz=zmin:zmax  for iy=ymin:ymax    for ix=xmin:xmax      ind=ind+1;      sph(ind)=data(ix,iy,iz);      iz1=iz-0.5+nsubhalf-zctr;      iz2=iz+0.5-zctr;      iy1=iy-0.5+nsubhalf-yctr;      iy2=iy+0.5-yctr;      ix1=ix-0.5+nsubhalf-xctr;      ix2=ix+0.5-xctr;      for zsub= iz1 : nsubstep : iz2        zsq=(zsub)^2;        for ysub= iy1 : nsubstep : iy2          ysq=(ysub)^2;          for xsub= ix1 : nsubstep : ix2            rsub= (xsub)^2 + ysq + zsq;            if (rsub<=radsq),  wt(ind)=wt(ind)+1; end          end        end      end     end   end endif (wflg==1) wt=wt.*wt; endave_sph=(sum(sph.*wt)/sum(wt))';% % ave_sph=(sum(sph.*wt))'; %sd_sph=(sqrt(var(sph,wt)))';max_sph=max(sph)';weights=sqrt(sum(wt.^2))/sum(wt);